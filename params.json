{"note":"Don't delete this file! It's used internally to help with page regeneration.","name":"golobsters","body":"\r\n### Overview\r\n`golobsters` is an application that posts stories from \r\n[lobste.rs](https://lobste.rs) to [Twitter](https://twitter.com/lobsternews).\r\n\r\nThere is an experimental [web interface](http://lobsters.kyleisom.net)\r\nwhere I am learning how to do that type of work in Go.\r\n\r\n### Background\r\nThe first version was written in 92 source lines of code in Python, and is\r\na fairly basic system based on SQLite. I've been learning\r\n[Go](http://www.golang.org) lately, and needed a project to work on,\r\npreferably writing some type of webapp as that is an area I have no experience\r\nin. Ergo, the decision to rewrite lobsterpie in Go.\r\n\r\n### Architecture\r\n`golobsters` is comprised of two main components, `bot` (the backend) and\r\n`frontend`. The backend employs a worker pool using goroutines and channels,\r\nwhile the frontend simply displays the last time the bot updated.\r\n\r\nThe backend starts up the worker pool, which communicate via a channel for\r\nnew stories. This channel is written to by the RSS feed parser, which is in\r\na separate goroutine. When the RSS feed is updated, it reads the entries,\r\nconverts them to the internal data structure that represents a story, and\r\nwrites that to the channel. The next available worker picks it up, checks\r\nwhether the story has already been posted, and if not, posts the story to\r\nTwitter and marks the story as read in the database. Reading from a channel\r\nblocks, so each worker essentially sleeps while waiting for new stories.\r\n\r\n### Deployment\r\n`golobsters` currently runs on [Heroku](https://www.heroku.com), and uses\r\na [Postgres](http://www.postgres.org) database stored on my postgres VPS. As\r\nthis application effectively only has one user, the transaction cost isn't\r\nan issue.\r\n\r\nI had originally wanted to use [Redis](https://www.redis.io) as my datastore,\r\nbut Heroku's Redis addon costs money. This app generates no revenue, so I\r\ndidn't want to end up paying for keeping it running; Redis also requires\r\nan SSL tunnel in order to communicate securely with remote datastores which\r\nwould end up being a hassle to setup. I already had a VPS set up with Postgres,\r\nso I ended up just using that. It is overkill, as the table merely stores the\r\nguid of the story, but the infrastructure was already in place.\r\n\r\nI am using the Heroku Go buildpack, which so far seems to run pretty smoothly;\r\nsetting up the deployment to Heroku was pretty easy and very\r\n[straightforward](https://gist.github.com/299535bbf56bf3016cba).\r\n\r\n\r\n","tagline":"golobsters posts new stories from lobste.rs to Twitter.","google":""}